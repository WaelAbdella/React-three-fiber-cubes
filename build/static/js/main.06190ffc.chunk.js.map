{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","SpinningMesh","position","color","args","speed","mesh","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","castShadow","ref","onClick","attach","MeshWobbleMaterial","factor","App","shadows","colorManagement","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","receiveShadow","Math","PI","opacity","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAWAA,cACA,IAAMC,EAAe,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACvCC,EAAOC,iBAAO,MACpBC,aAAS,kBAAOF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OACrE,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAQC,oBAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,KAG3C,OACE,eAAC,IAAER,KAAH,CACEa,YAAU,EACVC,IAAKd,EACLJ,SAAUA,EACVmB,QAAS,kBAAMN,GAAWD,IAC1BI,MAAOF,EAAME,MALf,UAOE,mCAAmBI,OAAO,WAAWlB,KAAMA,IAC3C,cAACmB,EAAA,EAAD,CACED,OAAO,WACPnB,MAAOA,EACPE,MAAOA,EACPmB,OAAQ,SAuDDC,MAjDf,WACE,OACE,mCACE,eAAC,IAAD,CACEC,SAAO,EACPC,iBAAe,EACfC,OAAQ,CAAE1B,SAAU,EAAE,EAAG,EAAG,IAAK2B,IAAK,IAHxC,UAKE,8BAAcC,UAAW,KACzB,kCACEX,YAAU,EACVjB,SAAU,CAAC,EAAG,GAAI,GAClB4B,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,4BAAYnC,SAAU,EAAE,GAAI,GAAI,IAAK4B,UAAW,KAChD,4BAAY5B,SAAU,CAAC,GAAI,GAAI,GAAI4B,UAAW,KAE9C,kCACE,uBACEQ,eAAa,EACb5B,SAAU,EAAE6B,KAAKC,GAAK,EAAG,EAAG,GAC5BtC,SAAU,CAAC,GAAI,EAAG,GAHpB,UAKE,qCAAqBoB,OAAO,WAAWlB,KAAM,CAAC,IAAK,OACnD,gCAAgBkB,OAAO,WAAWmB,QAAS,QAG7C,cAAC,EAAD,CACEvC,SAAU,CAAC,EAAG,EAAG,GACjBE,KAAM,CAAC,EAAG,EAAG,GACbD,MAAM,YACNE,MAAO,IAET,cAAC,EAAD,CAAcH,SAAU,EAAE,EAAG,GAAI,GAAIC,MAAM,OAAOE,MAAO,IACzD,cAAC,EAAD,CAAcH,SAAU,CAAC,EAAG,GAAI,GAAIC,MAAM,OAAOE,MAAO,OAE1D,cAACqC,EAAA,EAAD,UCvEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.06190ffc.chunk.js","sourcesContent":["import './App.scss';\nimport React, { useRef, useState } from 'react';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport {\n  softShadows,\n  MeshWobbleMaterial,\n  OrbitControls,\n} from '@react-three/drei';\n\nimport { useSpring, a } from 'react-spring/three';\n\nsoftShadows();\nconst SpinningMesh = ({ position, color, args, speed }) => {\n  const mesh = useRef(null);\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n  const [expand, setExpand] = useState(false);\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n\n  return (\n    <a.mesh\n      castShadow\n      ref={mesh}\n      position={position}\n      onClick={() => setExpand(!expand)}\n      scale={props.scale}\n    >\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial\n        attach='material'\n        color={color}\n        speed={speed}\n        factor={0.6}\n      />\n    </a.mesh>\n  );\n};\n\nfunction App() {\n  return (\n    <>\n      <Canvas\n        shadows\n        colorManagement\n        camera={{ position: [-5, 2, 10], fov: 60 }}\n      >\n        <ambientLight intensity={0.3} />\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <pointLight position={[0, -10, 0]} intensity={0.5} />\n\n        <group>\n          <mesh\n            receiveShadow\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, -3, 0]}\n          >\n            <planeBufferGeometry attach='geometry' args={[100, 100]} />\n            <shadowMaterial attach='material' opacity={0.3} />\n          </mesh>\n\n          <SpinningMesh\n            position={[0, 1, 0]}\n            args={[3, 2, 1]}\n            color='lightblue'\n            speed={2}\n          />\n          <SpinningMesh position={[-2, 1, -5]} color='pink' speed={6} />\n          <SpinningMesh position={[5, 1, -2]} color='pink' speed={6} />\n        </group>\n        <OrbitControls />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}